// Generated by rstantools.  Do not edit by hand.

/*
    pfaser is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pfaser is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pfaser.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_pfaser_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_pfaser");
    reader.add_event(101, 99, "end", "model_pfaser");
    return reader;
}
#include <stan_meta_header.hpp>
class model_pfaser
  : public stan::model::model_base_crtp<model_pfaser> {
private:
        int N;
        int L;
        int COI;
        vector_d y;
        std::vector<int> alleles;
        double beta_alpha_scale;
        double theta_C;
        double pi_alpha;
        double lam_alpha;
        double lam_beta;
        vector_d theta_alpha;
        vector_d beta_alpha;
        int alpha_counter;
        int idx_counter;
public:
    model_pfaser(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_pfaser(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_pfaser_namespace::model_pfaser";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "COI", "int", context__.to_vec());
            COI = int(0);
            vals_i__ = context__.vals_i("COI");
            pos__ = 0;
            COI = vals_i__[pos__++];
            check_greater_or_equal(function__, "COI", COI, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("alleles", "L", L);
            context__.validate_dims("data initialization", "alleles", "int", context__.to_vec(L));
            alleles = std::vector<int>(L, int(0));
            vals_i__ = context__.vals_i("alleles");
            pos__ = 0;
            size_t alleles_k_0_max__ = L;
            for (size_t k_0__ = 0; k_0__ < alleles_k_0_max__; ++k_0__) {
                alleles[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "beta_alpha_scale", "double", context__.to_vec());
            beta_alpha_scale = double(0);
            vals_r__ = context__.vals_r("beta_alpha_scale");
            pos__ = 0;
            beta_alpha_scale = vals_r__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "theta_C", "double", context__.to_vec());
            theta_C = double(0);
            vals_r__ = context__.vals_r("theta_C");
            pos__ = 0;
            theta_C = vals_r__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "pi_alpha", "double", context__.to_vec());
            pi_alpha = double(0);
            vals_r__ = context__.vals_r("pi_alpha");
            pos__ = 0;
            pi_alpha = vals_r__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "lam_alpha", "double", context__.to_vec());
            lam_alpha = double(0);
            vals_r__ = context__.vals_r("lam_alpha");
            pos__ = 0;
            lam_alpha = vals_r__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "lam_beta", "double", context__.to_vec());
            lam_beta = double(0);
            vals_r__ = context__.vals_r("lam_beta");
            pos__ = 0;
            lam_beta = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 16;
            validate_non_negative_index("theta_alpha", "COI", COI);
            theta_alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(COI);
            stan::math::fill(theta_alpha, DUMMY_VAR__);
            current_statement_begin__ = 17;
            validate_non_negative_index("beta_alpha", "(N * COI)", (N * COI));
            beta_alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>((N * COI));
            stan::math::fill(beta_alpha, DUMMY_VAR__);
            current_statement_begin__ = 18;
            alpha_counter = int(0);
            stan::math::fill(alpha_counter, std::numeric_limits<int>::min());
            stan::math::assign(alpha_counter,1);
            current_statement_begin__ = 19;
            idx_counter = int(0);
            stan::math::fill(idx_counter, std::numeric_limits<int>::min());
            stan::math::assign(idx_counter,1);
            // execute transformed data statements
            current_statement_begin__ = 21;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 22;
                for (int c = 1; c <= COI; ++c) {
                    current_statement_begin__ = 23;
                    for (int a = 1; a <= get_base1(alleles, l, "alleles", 1); ++a) {
                        current_statement_begin__ = 24;
                        stan::model::assign(beta_alpha, 
                                    stan::model::cons_list(stan::model::index_uni(alpha_counter), stan::model::nil_index_list()), 
                                    (1.0 / (get_base1(alleles, l, "alleles", 1) * beta_alpha_scale)), 
                                    "assigning variable beta_alpha");
                        current_statement_begin__ = 25;
                        stan::math::assign(alpha_counter, (alpha_counter + 1));
                    }
                }
            }
            current_statement_begin__ = 30;
            for (int c = 1; c <= COI; ++c) {
                current_statement_begin__ = 32;
                stan::model::assign(theta_alpha, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            (theta_C / ((COI - c) + 1)), 
                            "assigning variable theta_alpha");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 37;
            validate_non_negative_index("pre_theta", "COI", COI);
            num_params_r__ += COI;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            validate_non_negative_index("gamma_beta", "(N * COI)", (N * COI));
            num_params_r__ += (N * COI);
            current_statement_begin__ = 42;
            validate_non_negative_index("gamma_pi", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_pfaser() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 37;
        if (!(context__.contains_r("pre_theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pre_theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pre_theta");
        pos__ = 0U;
        validate_non_negative_index("pre_theta", "COI", COI);
        context__.validate_dims("parameter initialization", "pre_theta", "vector_d", context__.to_vec(COI));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pre_theta(COI);
        size_t pre_theta_j_1_max__ = COI;
        for (size_t j_1__ = 0; j_1__ < pre_theta_j_1_max__; ++j_1__) {
            pre_theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.positive_ordered_unconstrain(pre_theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pre_theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("lam")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lam missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lam");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lam", "double", context__.to_vec());
        double lam(0);
        lam = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, .05, lam);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lam: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("gamma_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_beta");
        pos__ = 0U;
        validate_non_negative_index("gamma_beta", "(N * COI)", (N * COI));
        context__.validate_dims("parameter initialization", "gamma_beta", "vector_d", context__.to_vec((N * COI)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_beta((N * COI));
        size_t gamma_beta_j_1_max__ = (N * COI);
        for (size_t j_1__ = 0; j_1__ < gamma_beta_j_1_max__; ++j_1__) {
            gamma_beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("gamma_pi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_pi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_pi");
        pos__ = 0U;
        validate_non_negative_index("gamma_pi", "N", N);
        context__.validate_dims("parameter initialization", "gamma_pi", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_pi(N);
        size_t gamma_pi_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < gamma_pi_j_1_max__; ++j_1__) {
            gamma_pi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma_pi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_pi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pre_theta;
            (void) pre_theta;  // dummy to suppress unused var warning
            if (jacobian__)
                pre_theta = in__.positive_ordered_constrain(COI, lp__);
            else
                pre_theta = in__.positive_ordered_constrain(COI);
            current_statement_begin__ = 38;
            local_scalar_t__ lam;
            (void) lam;  // dummy to suppress unused var warning
            if (jacobian__)
                lam = in__.scalar_lub_constrain(0, .05, lp__);
            else
                lam = in__.scalar_lub_constrain(0, .05);
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_beta;
            (void) gamma_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_beta = in__.vector_lb_constrain(0, (N * COI), lp__);
            else
                gamma_beta = in__.vector_lb_constrain(0, (N * COI));
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_pi;
            (void) gamma_pi;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_pi = in__.vector_lb_constrain(0, N, lp__);
            else
                gamma_pi = in__.vector_lb_constrain(0, N);
            // transformed parameters
            current_statement_begin__ = 46;
            validate_non_negative_index("theta", "COI", COI);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(COI);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,divide(pre_theta, sum(pre_theta)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 46;
            size_t theta_j_1_max__ = COI;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            stan::math::check_simplex(function__, "theta", theta);
            // model body
            {
            current_statement_begin__ = 50;
            int beta_pos(0);
            (void) beta_pos;  // dummy to suppress unused var warning
            stan::math::fill(beta_pos, std::numeric_limits<int>::min());
            stan::math::assign(beta_pos,1);
            current_statement_begin__ = 51;
            int pi_pos(0);
            (void) pi_pos;  // dummy to suppress unused var warning
            stan::math::fill(pi_pos, std::numeric_limits<int>::min());
            stan::math::assign(pi_pos,1);
            current_statement_begin__ = 52;
            for (int l = 1; l <= L; ++l) {
                {
                current_statement_begin__ = 53;
                validate_non_negative_index("allele_freq", "get_base1(alleles, l, \"alleles\", 1)", get_base1(alleles, l, "alleles", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> allele_freq(get_base1(alleles, l, "alleles", 1));
                stan::math::initialize(allele_freq, DUMMY_VAR__);
                stan::math::fill(allele_freq, DUMMY_VAR__);
                stan::math::assign(allele_freq,rep_vector(0.0, get_base1(alleles, l, "alleles", 1)));
                current_statement_begin__ = 54;
                validate_non_negative_index("fpi", "get_base1(alleles, l, \"alleles\", 1)", get_base1(alleles, l, "alleles", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fpi(get_base1(alleles, l, "alleles", 1));
                stan::math::initialize(fpi, DUMMY_VAR__);
                stan::math::fill(fpi, DUMMY_VAR__);
                stan::math::assign(fpi,segment(gamma_pi, pi_pos, get_base1(alleles, l, "alleles", 1)));
                current_statement_begin__ = 55;
                validate_non_negative_index("dat", "get_base1(alleles, l, \"alleles\", 1)", get_base1(alleles, l, "alleles", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dat(get_base1(alleles, l, "alleles", 1));
                stan::math::initialize(dat, DUMMY_VAR__);
                stan::math::fill(dat, DUMMY_VAR__);
                stan::math::assign(dat,segment(y, pi_pos, get_base1(alleles, l, "alleles", 1)));
                current_statement_begin__ = 56;
                for (int c = 1; c <= COI; ++c) {
                    {
                    current_statement_begin__ = 57;
                    validate_non_negative_index("beta", "get_base1(alleles, l, \"alleles\", 1)", get_base1(alleles, l, "alleles", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(get_base1(alleles, l, "alleles", 1));
                    stan::math::initialize(beta, DUMMY_VAR__);
                    stan::math::fill(beta, DUMMY_VAR__);
                    stan::math::assign(beta,segment(gamma_beta, beta_pos, get_base1(alleles, l, "alleles", 1)));
                    current_statement_begin__ = 58;
                    stan::math::assign(beta, divide(beta, sum(beta)));
                    current_statement_begin__ = 59;
                    stan::math::assign(allele_freq, add(allele_freq, multiply(get_base1(theta, c, "theta", 1), beta)));
                    current_statement_begin__ = 60;
                    stan::math::assign(beta_pos, (beta_pos + get_base1(alleles, l, "alleles", 1)));
                    }
                }
                current_statement_begin__ = 62;
                stan::math::assign(fpi, divide(fpi, sum(fpi)));
                current_statement_begin__ = 63;
                stan::math::assign(allele_freq, add(multiply(allele_freq, (1 - lam)), multiply(fpi, lam)));
                current_statement_begin__ = 64;
                lp_accum__.add(sum(elt_multiply(dat, stan::math::log(allele_freq))));
                current_statement_begin__ = 65;
                stan::math::assign(pi_pos, (pi_pos + get_base1(alleles, l, "alleles", 1)));
                }
            }
            current_statement_begin__ = 68;
            lp_accum__.add(beta_log(lam, lam_alpha, lam_beta));
            current_statement_begin__ = 69;
            lp_accum__.add(gamma_log(pre_theta, theta_alpha, 1));
            current_statement_begin__ = 70;
            lp_accum__.add(gamma_log(gamma_beta, beta_alpha, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(gamma_log(gamma_pi, pi_alpha, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pre_theta");
        names__.push_back("lam");
        names__.push_back("gamma_beta");
        names__.push_back("gamma_pi");
        names__.push_back("theta");
        names__.push_back("strain_identity");
        names__.push_back("strain_dist");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(COI);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N * COI));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(COI);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dims__.push_back(COI);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(COI);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_pfaser_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> pre_theta = in__.positive_ordered_constrain(COI);
        size_t pre_theta_j_1_max__ = COI;
        for (size_t j_1__ = 0; j_1__ < pre_theta_j_1_max__; ++j_1__) {
            vars__.push_back(pre_theta(j_1__));
        }
        double lam = in__.scalar_lub_constrain(0, .05);
        vars__.push_back(lam);
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_beta = in__.vector_lb_constrain(0, (N * COI));
        size_t gamma_beta_j_1_max__ = (N * COI);
        for (size_t j_1__ = 0; j_1__ < gamma_beta_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_pi = in__.vector_lb_constrain(0, N);
        size_t gamma_pi_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < gamma_pi_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_pi(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 46;
            validate_non_negative_index("theta", "COI", COI);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(COI);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,divide(pre_theta, sum(pre_theta)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 46;
            stan::math::check_simplex(function__, "theta", theta);
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_1_max__ = COI;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 75;
            validate_non_negative_index("strain_identity", "L", L);
            validate_non_negative_index("strain_identity", "COI", COI);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> strain_identity(L, COI);
            stan::math::initialize(strain_identity, DUMMY_VAR__);
            stan::math::fill(strain_identity, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("strain_dist", "COI", COI);
            validate_non_negative_index("strain_dist", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> strain_dist(COI, N);
            stan::math::initialize(strain_dist, DUMMY_VAR__);
            stan::math::fill(strain_dist, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 78;
            int beta_pos(0);
            (void) beta_pos;  // dummy to suppress unused var warning
            stan::math::fill(beta_pos, std::numeric_limits<int>::min());
            stan::math::assign(beta_pos,1);
            current_statement_begin__ = 79;
            int locus_coi_pos(0);
            (void) locus_coi_pos;  // dummy to suppress unused var warning
            stan::math::fill(locus_coi_pos, std::numeric_limits<int>::min());
            stan::math::assign(locus_coi_pos,1);
            current_statement_begin__ = 80;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 81;
                for (int c = 1; c <= COI; ++c) {
                    {
                    current_statement_begin__ = 82;
                    local_scalar_t__ max_el_val(DUMMY_VAR__);
                    (void) max_el_val;  // dummy to suppress unused var warning
                    stan::math::initialize(max_el_val, DUMMY_VAR__);
                    stan::math::fill(max_el_val, DUMMY_VAR__);
                    stan::math::assign(max_el_val,0);
                    current_statement_begin__ = 84;
                    validate_non_negative_index("beta", "get_base1(alleles, l, \"alleles\", 1)", get_base1(alleles, l, "alleles", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(get_base1(alleles, l, "alleles", 1));
                    stan::math::initialize(beta, DUMMY_VAR__);
                    stan::math::fill(beta, DUMMY_VAR__);
                    stan::math::assign(beta,segment(gamma_beta, beta_pos, get_base1(alleles, l, "alleles", 1)));
                    current_statement_begin__ = 85;
                    stan::math::assign(beta, divide(beta, sum(beta)));
                    current_statement_begin__ = 87;
                    for (int a = 1; a <= get_base1(alleles, l, "alleles", 1); ++a) {
                        current_statement_begin__ = 88;
                        if (as_bool(logical_gt(get_base1(beta, a, "beta", 1), max_el_val))) {
                            current_statement_begin__ = 89;
                            stan::math::assign(max_el_val, get_base1(beta, a, "beta", 1));
                            current_statement_begin__ = 90;
                            stan::model::assign(strain_identity, 
                                        stan::model::cons_list(stan::model::index_uni(l), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                        a, 
                                        "assigning variable strain_identity");
                        }
                        current_statement_begin__ = 92;
                        stan::model::assign(strain_dist, 
                                    stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni((locus_coi_pos + (a - 1))), stan::model::nil_index_list())), 
                                    get_base1(beta, a, "beta", 1), 
                                    "assigning variable strain_dist");
                        current_statement_begin__ = 93;
                        stan::math::assign(beta_pos, (beta_pos + 1));
                    }
                    }
                }
                current_statement_begin__ = 96;
                stan::math::assign(locus_coi_pos, (locus_coi_pos + get_base1(alleles, l, "alleles", 1)));
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 75;
            size_t strain_identity_j_2_max__ = COI;
            size_t strain_identity_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < strain_identity_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < strain_identity_j_1_max__; ++j_1__) {
                    vars__.push_back(strain_identity(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 76;
            size_t strain_dist_j_2_max__ = N;
            size_t strain_dist_j_1_max__ = COI;
            for (size_t j_2__ = 0; j_2__ < strain_dist_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < strain_dist_j_1_max__; ++j_1__) {
                    vars__.push_back(strain_dist(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_pfaser";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pre_theta_j_1_max__ = COI;
        for (size_t j_1__ = 0; j_1__ < pre_theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pre_theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lam";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_beta_j_1_max__ = (N * COI);
        for (size_t j_1__ = 0; j_1__ < gamma_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_pi_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < gamma_pi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_pi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = COI;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t strain_identity_j_2_max__ = COI;
        size_t strain_identity_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < strain_identity_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < strain_identity_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "strain_identity" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t strain_dist_j_2_max__ = N;
        size_t strain_dist_j_1_max__ = COI;
        for (size_t j_2__ = 0; j_2__ < strain_dist_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < strain_dist_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "strain_dist" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pre_theta_j_1_max__ = COI;
        for (size_t j_1__ = 0; j_1__ < pre_theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pre_theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lam";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_beta_j_1_max__ = (N * COI);
        for (size_t j_1__ = 0; j_1__ < gamma_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_pi_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < gamma_pi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_pi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = (COI - 1);
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t strain_identity_j_2_max__ = COI;
        size_t strain_identity_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < strain_identity_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < strain_identity_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "strain_identity" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t strain_dist_j_2_max__ = N;
        size_t strain_dist_j_1_max__ = COI;
        for (size_t j_2__ = 0; j_2__ < strain_dist_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < strain_dist_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "strain_dist" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_pfaser_namespace::model_pfaser stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
